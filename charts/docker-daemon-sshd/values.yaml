# Default values for docker-daemon-sshd.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

dind:
  image:
    repository: docker.io/docker
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: # 20.10-dind
  ## .Values.dind.resources
  # resources:
  #   limits:
  #     cpu: "1500m"
  #     memory: "4096Mi"
  #   requests:
  #     cpu: "750m"
  resources: {}
  ### .Values.dind.storageDriver
  ## possible values: https://docs.docker.com/storage/storagedriver/select-storage-driver/
  storageDriver: vfs # overlay2

# .Values.existingDockerDaemon
### it is about using external Docker Daemon, point to it,,.. instead of provisioing Dind
existingDockerDaemon:
  enabled: false
  ip:
  port: 22
  sshUser:
  sshMaxSessions: 100
monitoring:
  enabled: false
  # "metrics-addr": "0.0.0.0:9999" in /etc/docker/*.json
  port: 9999
  serviceMonitor:
    # -- Enable a prometheus ServiceMonitor
    enabled: false
    # -- Prometheus ServiceMonitor interval
    interval: 30s
    # -- Prometheus ServiceMonitor path
    path: /metrics
    # -- Prometheus [RelabelConfigs] to apply to samples before scraping
    relabelings: []
    # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    metricRelabelings: []
    # -- Prometheus ServiceMonitor selector
    selector: {}
      # release: prometheus

    # -- Prometheus ServiceMonitor namespace
    namespace: "" # "monitoring"
    # -- Prometheus ServiceMonitor labels
    additionalLabels: {}

sshd:
  image:
    repository: docker.io/praqma/alpine-sshd
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  ## .Values.sshd.resources
  resources:
    limits:
      cpu: '1000m'
      memory: '256Mi'
    requests:
      memory: '64Mi'
  # depends on https://github.com/stfsy/prometheus-what-active-users-exporter/
  monitoring:
    enabled: false
    port: 9839
    serviceMonitor:
      # -- Enable a prometheus ServiceMonitor
      enabled: false
      # -- Prometheus ServiceMonitor interval
      interval: 30s
      # -- Prometheus ServiceMonitor path
      path: /metrics
      # -- Prometheus [RelabelConfigs] to apply to samples before scraping
      relabelings: []
      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # release: prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      # -- Prometheus ServiceMonitor labels
      additionalLabels: {}

dockerClient:
  image:
    repository: docker.io/docker
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: # "20.10"
  ## .Values.dockerClient.resources
  resources:
    limits:
      cpu: '100m'
      memory: '64Mi'
  ### .Values.dockerClient.extraDockerContextes
  ## .i.e
  extraDockerContextes: []
## .Values.imagePullSecrets
## example:
# imagePullSecrets:
#   - name: nexus
imagePullSecrets: []
sshClient:
  mountPath: /tmp/ssh-files
  # execute automatically "docker context use ..." . yes/no
  useContext: false
  # instead of useContext, you can auto-select the first healthy daemon
  autoSelectContext: true
  ## .Values.sshClient.dockerLoginCmd
  # docker login my.private.registry.co -u USER -p PASS
  dockerLoginCmd:
  ## .Values.sshClient.postStartCmd
  ## command to run at the end of script which runs at the lifecycle postStart of the client pod
  ## example:
  # postStartCmd: docker login nexus.nexus -u ci-user -p Aa123456
  # postStartCmd: http_proxy=proxy.nexus:8082 apk add --update openssh-client
  postStartCmd:
  ### .Values.sshClient.namespaces
  ## namespaces that require to have the ssh assets (keys, config,...)
  namespaces: []
  ### .Values.sshClient.extraKnownHosts
  ## i.e.
  # extraKnownHosts:
  #   - 10.33.44.39
  #   - vm-abdennour.guacamole
  #   - pe1-cdx-rv-gs05.docker
  extraKnownHosts: []
  podExample:
    enabled: true
    imageRepository: docker.io/abdennour/docker-compose
    imageTag: 1.29.2-ssh
    ## .Values.imagePullSecrets
    ## example:
    # imagePullSecrets:
    #   - name: nexus
    imagePullSecrets: []
    resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
sshKeys:
  public:
  private:

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## persistence for the docker storage
persistence:
  enabled: true
  ## for hostPath VOl
  hostPath: # /opt/pods-{{ .Chart.Name }}-{{ .Release.Name }}
  ## exsting
  exsitingClaim:
  ## for new PVC: ( If hostPath is empty && existingClaim is empty )
  size: 100Gi
  accessMode: ReadWriteOnce # or ReadWriteOnce ReadWriteMany
  ## jenkins data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ## in general check output of : kubectl get sc (of your cluster)
  storageClass:

cacheCleaner:
  enabled: false
  ## .Values.cacheCleaner.schedule
  ##    job will be run periodically as per this value
  schedule: '0 1 * * *'
  ## .Values.cacheCleaner.until
  ##    only clean docker objects before this value. 
  ## and keep objects after that value
  until: 24h
  byImageLabel: # imagenature=builtbyci
  image:
    repository: docker.io/docker # docker.io/abdennour/docker
    tag: # 20.10-buildx-0.6.3
  apiVersion: batch/v1beta1

nodeSelector: {}

tolerations: []

affinity: {}
