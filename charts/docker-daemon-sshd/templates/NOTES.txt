Connect to the docker daemon using this command:
----

```
docker context create remote --docker "host=ssh://{{ include "docker-daemon-sshd.sshUser" $ }}@{{ include "docker-daemon-sshd.fullname" $ }}.{{ .Release.Namespace }}";
```

EXAMPLES: 
In order to see examples below, make sure to :
 - provide at least one namespace in .Values.sshClient.namespaces
 - and .Values.sshClient.podExample.enabled to be "true"

-----
{{- if .Values.sshClient.podExample.enabled }}
Try to connect to docker clients :
{{ range $ns := .Values.sshClient.namespaces }}  
kubectl -n {{ $ns }} exec -it {{ include "docker-daemon-sshd.fullname" $ }}-client-example-0 -c docker-client -- docker ps
{{- end }}
{{- end }}

----

For any other Pod 'x' in namespace 'y' wants to use this daemon, make sure to do the following : 

1. namespace 'y' is mentioned in `sshClient.namespaces` array. i.e. sshClient.namespaces=['y']

2. the pod/container 'x' has at least 2 executables : `ssh` client (openssh-client) +  docker client (docker )
  i.e. : {{ .Values.sshClient.podExample.imageRepository }}:{{ .Values.sshClient.podExample.imageTag }}

3. the pod 'x' define an extra volume from the configMap {{ include "docker-daemon-sshd.fullname" $ }}-ssh-dir

```
  volumes:
  - name: docker-ssh-files
    configMap:
      name: {{ include "docker-daemon-sshd.fullname" $ }}-ssh-dir
```
4. the pod/container 'x' mounts the volume as following: 

```
    - name: docker-ssh-files
      mountPath: {{ $.Values.sshClient.mountPath }}
```

5. the pod/container 'x' lifecycle (postStart) should be :

```
    lifecycle:
      postStart:
        exec:
          command:
          - sh
          - {{ $.Values.sshClient.mountPath }}/post-start.sh
```

{{- if .Values.existingDockerDaemon.enabled }}
##########
# Prepare Machine {{ .Values.existingDockerDaemon.ip }} where existing daemon running ##
########

kubectl -n {{ .Release.Namespace}} get configmap {{ include "docker-daemon-sshd.fullname" . }}-helper-scripts \
  -o jsonpath='{.data.prepare-existing-daemon\.sh}' > prepare-existing-daemon.sh
scp prepare-existing-daemon.sh {{ .Values.existingDockerDaemon.ip }}:/tmp/
ssh {{ .Values.existingDockerDaemon.ip }}
> sudo su -
> bash /tmp/prepare-existing-daemon.sh
{{- end }}

{{- if .Values.sshd.monitoring.enabled }}
kubectl -n {{ .Release.Namespace}} get configmap {{ include "docker-daemon-sshd.fullname" . }}-helper-scripts \
  -o jsonpath='{.data.install-prometheus-exporter-active-ssh-users\.sh}' > install-prometheus-exporter-active-ssh-users.sh
scp install-prometheus-exporter-active-ssh-users.sh {{ .Values.existingDockerDaemon.ip }}:/tmp/
ssh {{ .Values.existingDockerDaemon.ip }}
> sudo su -
> bash /tmp/install-prometheus-exporter-active-ssh-users.sh
{{- end }}
