# @param companyDomain - used for labeling resources if required
companyDomain: company.com
# Default values for web-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
openshift: true
## @param replicaCount
replicaCount: 1
## @param replicaMinAvailable it's PodDisruptionBudget.spec.minAvailable
##     An eviction is allowed if at least "minAvailable" pods selected by
##     "selector" will still be available after the eviction, i.e. even in the
##     absence of the evicted pod. So for example you can prevent all voluntary
##     evictions by specifying "100%".
replicaMinAvailable: 1
## @section App Image

## @param image.registry App image registry (i.e. registry.company.lan )
## @param image.tag App image tag (i.e v1.2.2)
## @param image.pullSecret secret allows the App to be pulled from the registry
## @param image.stream Openshift image stream configuration Instead Of image.repository. Includes 2 fields: name and namespace
image:
  ## @param image.registry 
  registry: ""
  ## tag: latest (check image tag pushed by pipeline service after build)
  tag: ""
  ## @param image.repository
  ##
  ## One of two is REQUIRED: either image.repository or image.stream...and NOT both
  ## repository: .e.g. registry.company.lan/myproj/myapp
  ##            it's the full image name , except the tag
  ##             Useful if the image is outside the internal
  ##             registry of the OCP cluster (e.g. dev, qa)
  ##        (check image repo pushed by pipeline service after build)
  repository: ""
  ## pullSecret: if repository is private, use pullSecret
  ##             defaults to nexus
  pullSecret: ""
  ## imagestream - relative to the Cluster where resources will be deployed
  ##               useful if the image is inside the internal
  ##               registry of the OCP cluster (.e.g staging, prod)

  # stream:
  #   name: myapp
  #   namespace:
  # @param image.stream Openshift Image Stream Settings
  ## It requires image.registry (i.e. docker-registry.default.svc:5000)
  stream:
    ## @param image.stream.name imagestream resource name
    name:
    ## @param image.stream.namespace
    ## namespace like: myproject or openshift : depends where is your imagestream
    ## it defaults to namespace of the RELEASE (.Release.Namespace)
    namespace:

## @param command alternative of entrypoint in docker-compose
##
command: []
## @param args alternative of command in docker-compose
args: []


## @param deployment more props about deployment
## @param deployment.enabled Enable Pod run as Deployment not as cronjob or something else
## @param deployment.kind Kind of Resource running the App : Deployment or DeploymentConfig
deployment:
  enabled: true
  ## the kind of deployment : Deployment or DeploymentConfig or Job
  kind: Deployment
  mountEnvVars: true
  annotations: {}
  ## about how many replicaset should be kept in the history
  revisionHistoryLimit: 5
  ## triggers for auto rolling-update pods.
  triggers:
    imageStreamChange: true
## @param port your app port (container port)
# port: 5000 # maybe for python app
# port: 3000 # maybe for nodejs, react app,.. so on
port: 8080
## @param extraPorts extra ports
# extraPorts: [1378, 5040]
extraPorts: []

## @param route Assiging public Hostname to your app
route:
  enabled: false
  ## domain: i.e. cluster.apps.company.lan
  ## if you specify domain, the chart will automatically calculate
  ## the subdomain , then the full hostname will be subdomain.domain
  domain: ''
  ## specify the exact hostname as you want
  ## without delegating it to the automation
  host: ''
  path: /
  extraHosts: []
  ## .Values.route.secure
  ## To enable tls for host, set secure: true
  secure: true
  ## To enable tls for extraHosts, set secureExtraHosts: true
  secureExtraHosts: true
  ## .Values.route.termination
  ## if it's secure, you can choose the termination
  termination: edge
  ## .Values.route.annotations
  # annotations:
  #   nginx.ingress.kubernetes.io/rewrite-target: /scm/$1
  annotations: {}
  ## .Values.route.path
  # path: /(.*) # useful when rewrite-target used
  path: /

####
## Environment Variables to be populated inside the container of the app
# envVars:
#   SPRING_LOCATION_CONFIG: /opt/app.yaml
#   SMS_API_PASSWORD: xBlah
#   REACT_APP_API_URL: https://api.example.com/v2
envVars: {}
####
## Environment Variables where
##   its values has been SEALED with kubeseal - cluster-wide scope by default:
##     Check : https://github.com/bitnami-labs/sealed-secrets
# envVarsSealed:
#   DB_PASS: AgAhm1kcbWFHW......
envVarsSealed: {}
### sealScope:
## One of 3 values: cluster-wide, namespace-wide or strict
### if cluster-wide, you have to kubeseal with --scope cluster-wide.. so on
##  More details:   https://github.com/bitnami-labs/sealed-secrets
sealScope: cluster-wide
# https://github.com/bitnami-labs/sealed-secrets#scopes
sealScopes:
  - cluster-wide
  - namespace-wide
  - strict
####
## Environment Variables Already exist in some configMap or/and secrets
# envFrom:
#   - configMapRef:
#       name: my-existing-configmap
#   - secretRef:
#       name: my-existing-secret
####
envFrom: []

#####
## Environment Variables Already in some ocnfigMap or/and Secrets
## But you wanna mount it with different keys.
# - name: SPRING_BUCKET_NAME
#   valueFrom:
#     configMapKeyRef:
#       name: <obc-name>
#       key: BUCKET_NAME
# - name: SPRING_S3_ACCESS_KEY
#   valueFrom:
#     secretKeyRef:
#       name: <obc-name>
#       key: AWS_ACCESS_KEY_ID
######
env: []
### configFile is useful to mount a whole config file ###
configFile:
  name: # application.properties
  ## what's the content of this config file
  ## Hint: Check YAML syntax, to use multi-line string
  ## example of config file content
  # content: |
  #   spring.appName = myapp
  #   spring.context = /
  content: #
  ## At a specific path, the config file will be mounted
  ##   inside the container where the app is running
  mount: # /opt/app
serviceAccount:
  ## Specifies whether a service account should be created
  create: true
  ## Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # @param serviceAccount.anyuid - grant the SCC anyuid for the serviceaccount
  anyuid: false
  # @param serviceAccount.privileged - use case when securityContext requires capability SYS_CHROOT and runAsUser 0, and runAsGroup 0
  privileged: false

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

# runAsUser: 1001
runAsUser:

service:
  type: ClusterIP
  port: 80

## @param startupProbe
### Use case for legacy app which has long startup
startupProbe: {}

## @param livenessProbe ##
## How to know that your app is alive. If it's not alive, it will keep restarting
##   more details: oc explain dc.spec.template.spec.containers.livenessProbe
## If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'livenessProbe:'.
livenessProbe: {}
  # httpGet:
  #   path: /healthz
  #   port: http
## full example
  # httpGet:
  #   path: /healthz
  #   port: http
  # successThreshold: 1
  # failureThreshold: 3
  # periodSeconds: 10 # How often (in seconds) to perform the probe
  # initialDelaySeconds: 30  # Helpful for long app startup
  # timeoutSeconds: 1
## another -livenessProbe example - based on local command instead of rest call
  # exec:
  #   command:
  #    - pgrep
  #    - java
## another -livenessProbe example - based on tcp instead of layer 7
  # tcpSocket:
  #   port: 6379

## @param readinessProbe ##
## How to know that your app is READY to receive traffic?
## If it's not ready, endpoint between service/pod will not be created
##    then traffic will not be forwarded to the pod
##    more details: oc explain dc.spec.template.spec.containers.readinessProbe
## If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'readinessProbe:'.
readinessProbe: {}
  # httpGet:
  #   path: /healthz
  #   port: http
## check also all livenessProbe examples, they have same fields but not same purpose

## We usually recommend not to specify default resources and to leave this as a conscious
## choice for the user. This also increases chances charts run on environments with little
## resources, such as Minikube. If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## @param securityContext Pod Level
##
## Get fields of this value by running "oc explain dc.spec.template.spec.securityContext"
## If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'securityContext:'.
## securityContext:
##   capabilities:
##     drop:
##     - ALL
##   readOnlyRootFilesystem: true
##   runAsNonRoot: true
##   runAsUser: 1000
securityContext: {}
rollout:
  # In kind=Statefulset, 2 values available: RollingUpdate or OnDelete
  type: RollingUpdate
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 70

nameOverride: ""
fullnameOverride: ""

nodeSelector: {}

tolerations: []

affinity: {}


### Do you requires any data persistence ? ###
persistence:
  enabled: false
  mount: # .e.g /var/lib/redis/data
  readOnly: false
  size: 1Gi
  existingClaim:
  accessMode: ReadWriteOnce # ReadWriteMany
  ## jenkins data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  storageClass:
  # PV name
  volumeName:
# 2nd PVC if needed
extraPersistence:
  enabled: false
  ## A manually managed Persistent Volume and Claim
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim:
  mount: # .e.g /var/lib/redis/data
  readOnly: false
  size: 1Gi
  accessMode: ReadWriteOnce # ReadWriteMany
  ## jenkins data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  storageClass:
  # PV name
  volumeName:
########### Additional Resources ############
## initContainers
## it's List / Array
initContainers: []
  # - name: env-generator
  #   image: abdennour/dotenv-to-js-object:4ea
  #   args:
  #     - --dest=/data
  #     - --env-vars-filter=REACT_APP_
  #     - --run-as=job
  #   volumeMounts:
  #     - name: data-env
  #       mountPath: /data
  #   envFrom:
  #     - secretRef:

### Same Shape as initContainers
containers: []
## additional volumeMounts
## it's List / Array
volumeMounts: []
  # - name: data-env
  #   mountPath: /usr/share/nginx/html/config
## additional volumes
## it's list / Array
volumes: []
  # - name: data-env
  #   emptyDir: {}

## additional volumeClaimTemplates
# volumeClaimTemplates:
#   - apiVersion: v1
#     kind: PersistentVolumeClaim
#     metadata:
#       name: data
#     spec:
#       accessModes:
#         - "ReadWriteOnce"
#       resources:
#         requests:
#           storage: "10Gi"
volumeClaimTemplates: []

networkPolicy:
  3scale:
    enabled: false
    namespace: 3scale
    labels:
      app: APIcast

apm:
  enabled: false
  # java, dotnet, nodejs, python, go, rust, php
  runtime: ""
  # default to a smart calculation of app name
  appName: ""
  # One of:  OFF, ERROR, CRITICAL, WARN, WARNING, INFO, DEBUG, TRACE
  logLevel: INFO # INFO # TRACE
  # https://www.elastic.co/guide/en/apm/agent/java/current/config-logging.html
  logFile: /dev/stdout # System.out
  packages: com.company
  # @param apm.imageTag last released image from cloudnative/sidecar-elastic-apm-agent
  imageTag: v1.45-afd238e # 1.36.0-9b76405
apmProvider:
  name: elastic
  endpoint: http://apm.services
  token: user:pass_base64Deoced
  supportedRuntimes:
    - java
    - dotnet
    - php
    - python
    - go
    - nodejs
    - rust


# \@param job Customize the app if it runs as job @param .deployment.kind == Job
job:
  restartPolicy: Never # OnFailure
  # @param job.backoffLimit - Specifies the number of retries before marking this job failed.
  backoffLimit: 0
  # @param job.annotations specify the Job hook ( pre, post, ..etc). Default to Pre Hook
  annotations:
    argocd.argoproj.io/sync-wave: "0"
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation # HookSucceeded  


cronjob:
  enabled: false
  image:
    # .i.e: registry.company.lan/myproject/myapp
    repository:
    # .i.e: 1.0.0-er3299
    tag:
    pullPolicy: IfNotPresent
    # i.e: nexus
    pullSecret:
  restartPolicy: Always # OnFailure
  ## command ------------
  # command:
  # - python
  # - /var/www/app/tamm_job.py
  command: []
  # runAsUser: 1000330000 # as example
  runAsUser:
  # schedule: '*/5 * * * *' # for example, every 5 minutes
  schedule:
  concurrencyPolicy: Allow # or Forbid
  mountEnvVars: true
  # persistentMountPath: /data/dir1
  persistentMountPath:
  # extraPersistenceMountPath: /data/dir2
  extraPersistenceMountPath:
  # readonly mount ?
  persistentMountReadOnly: false
  extraPersistenceMountReadOnly: false
  ## podSecurityContext (same level as containers not under containers)
  ## .i.e:
  # podSecurityContext:
  #   securityContext:
  #     fsGroup: 1000330000
  #     seLinuxOptions:
  #       level: s0:c18,c12
  #     supplementalGroups:
  #     - 0
  #     - 2000
  #     - 1000320000
  podSecurityContext: {}
